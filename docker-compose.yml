version: '3.8'
services:
  # Zookeeper service
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  # Kafka service
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092  # Change to use the service name
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper


  # Prometheus service
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    environment:
      - PROMETHEUS_CONFIG_FILE=/etc/prometheus/prometheus.yml
    depends_on:
      - kafka  # Ensures that Prometheus waits for Kafka to be available
      - opentelemetry-collector

  # Grafana service
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"  # Grafana dashboard on port 3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Default admin password
    depends_on:
      - prometheus  # Grafana waits for Prometheus
      - jaeger

  # OpenTelemetry Collector (otel)
  opentelemetry-collector:
    image: otel/opentelemetry-collector:latest
    ports:
      - "55680:55680"  # OpenTelemetry gRPC receiver
      - "8888:8888"  # OpenTelemetry HTTP receiver
    environment:
      - OTEL_SERVICE_NAME=kafka-consumer
      - OTEL_EXPORTER=prometheus
      - OTEL_EXPORTER_PROMETHEUS_ENDPOINT=http://prometheus:9090/metrics  # Prometheus metrics exporter
    depends_on:
      - kafka

  # PostgreSQL service for Keycloak
  postgres:
    image: bitnami/postgresql:latest
    environment:
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak_password
      - POSTGRES_DB=keycloak
    ports:
      - "5432:5432"
    volumes:
      - keycloak_db_data:/bitnami/postgresql


  # Keycloak service
  keycloak:
    image: quay.io/keycloak/keycloak:26.0.4
    command: [ "start-dev", "--import-realm" ]
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=Admin2024!
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak_password
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    volumes:
      - ./realms/:/opt/keycloak/data/import/
  

  jaeger:
    image: jaegertracing/all-in-one:1.62.0
    ports:
      - "6831:6831/udp"
      - "16686:16686"

  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "8084:8084"
    depends_on:
      - keycloak
      - kafka
      - prometheus
      - jaeger
      - auth-service
      - order-service
      - product-service

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
    ports:
      - "8088:8088"
    depends_on:
      - keycloak
      - prometheus
      - jaeger

  # Email Service
  email-service:
    build:
      context: ./email-service
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - prometheus
      - jaeger
    entrypoint: ["./wait-for-it.sh", "kafka:9092", "--", "python", "main.py"]



  # Order Service
  order-service:
    build:
      context: ./order-service
    ports:
      - "8082:8082"
    depends_on:
      - keycloak
      - kafka
      - prometheus
      - jaeger
    entrypoint: ["./wait-for-it.sh", "kafka:9092", "--", "python", "main.py"]

  # Product Service
  product-service:
    build:
      context: ./product-service
    ports:
      - "8081:8081"
    depends_on:
      - keycloak
      - kafka
      - prometheus
      - jaeger
    entrypoint: ["./wait-for-it.sh", "kafka:9092", "--", "python", "main.py"]

networks:
  default:
    driver: bridge  # Use Docker's default bridge network

volumes:
  keycloak_db_data: